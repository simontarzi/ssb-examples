{"version":1,"sql":"--inbound stream of events and used SSB to detect transactions that look potentially fraudulent\n--However, we only have account_id, transaction_id and location attributes\n\nSELECT\n      txn1.ts as EVENT_TIME,\n      txn2.ts,\n      txn1.account_id as ACCOUNT_ID,\n      txn1.transaction_id AS TRANSACTION_ID,\n      txn2.transaction_id,\n      txn1.amount as AMOUNT,\n      txn1.lat AS LAT,\n      txn1.lon AS LON,\n      HAVETOKM(cast (txn1.lat as string) , cast(txn1.lon as string) , cast(txn2.lat as string) , cast(txn2.lon as string)) as distance\n\nFROM  txn1\nINNER JOIN  txn2\n      on txn1.account_id=txn2.account_id\nwhere\n      txn1.transaction_id <> txn2.transaction_id\n      AND (txn1.lat <> txn2.lat OR txn1.lon <> txn2.lon)\n      AND txn1.ts < txn2.ts\n      AND HAVETOKM(cast (txn1.lat as string) , cast(txn1.lon as string) , cast(txn2.lat as string) , cast(txn2.lon as string)) > 1\n      AND txn2.event_time  BETWEEN txn1.event_time - INTERVAL '10' MINUTE AND txn1.event_time","tables":[{"name":"ssb.ssb_default.txn1","sql":"CREATE TABLE `ssb`.`ssb_default`.`txn1` (\n  `ts` VARCHAR(2147483647),\n  `account_id` BIGINT,\n  `transaction_id` VARCHAR(2147483647),\n  `amount` BIGINT,\n  `lat` DOUBLE,\n  `lon` DOUBLE,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE METADATA FROM 'timestamp',\n  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '3' SECOND\n) WITH (\n  'scan.startup.mode' = 'earliest-offset',\n  'properties.request.timeout.ms' = '120000',\n  'properties.auto.offset.reset' = 'earliest',\n  'format' = 'json',\n  'properties.bootstrap.servers' = 'cdp.54.73.61.243.nip.io:9092',\n  'connector' = 'kafka',\n  'properties.transaction.timeout.ms' = '900000',\n  'topic' = 'txn1'\n)\n"},{"name":"ssb.ssb_default.txn2","sql":"CREATE TABLE `ssb`.`ssb_default`.`txn2` (\n  `ts` VARCHAR(2147483647),\n  `account_id` BIGINT,\n  `transaction_id` VARCHAR(2147483647),\n  `amount` BIGINT,\n  `lat` DOUBLE,\n  `lon` DOUBLE,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE METADATA FROM 'timestamp',\n  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '3' SECOND\n) WITH (\n  'scan.startup.mode' = 'earliest-offset',\n  'properties.request.timeout.ms' = '120000',\n  'properties.auto.offset.reset' = 'earliest',\n  'format' = 'json',\n  'properties.bootstrap.servers' = 'cdp.54.73.61.243.nip.io:9092',\n  'connector' = 'kafka',\n  'properties.transaction.timeout.ms' = '900000',\n  'topic' = 'txn2'\n)\n"}],"external_catalogs":{},"udfs":[],"js_udfs":[{"org_name":"ssb_default","name":"HAVETOKM","description":"HAVETOKM Haversine distance calculator","input_types":["STRING","STRING","STRING","STRING"],"output_type":"STRING","code":"// Haversine distance calculator\n\nfunction HAVETOKM(lat1,lon1,lat2,lon2) {\nfunction toRad(x) {\nreturn x * Math.PI / 180;\n}\n\n  var R = 6371; // km\n  var x1 = lat2 - lat1;\n  var dLat = toRad(x1);\n  var x2 = lon2 - lon1;\n  var dLon = toRad(x2)\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n\n  // convert to string\n  return (d).toFixed(2).toString();\n}\nHAVETOKM($p0, $p1, $p2, $p3);"}],"jars":[],"mv_data":null}